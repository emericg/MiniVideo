language: cpp
sudo: required

os:
  - linux
  - osx

cache:
  apt: true

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-add-repository ppa:beineri/opt-qt-5.10.1-trusty -y;
      sudo apt-add-repository ppa:ubuntu-toolchain-r/test -y;
      sudo apt-get update -q;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update;
    fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get install g++-7 -y;
      sudo apt-get install qt510base qt510svg qt510imageformats qt510tools -y;
      sudo apt-get install linux-headers-generic -y;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install qt;
    fi
  # Generate the linux/memfd.h header
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo mkdir -p /usr/include/linux; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo touch /usr/include/linux/memfd.h; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo chmod 777 /usr/include/linux/memfd.h; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo printf "%s\n" \
           "#ifndef _LINUX_MEMFD_H" \
           "#define _LINUX_MEMFD_H" \
           "" \
           "#define __NR_memfd_create 319" \
           "#define SYS_memfd_create __NR_memfd_create" \
           "" \
           "#define MFD_CLOEXEC             0x0001U" \
           "#define MFD_ALLOW_SEALING       0x0002U" \
           "" \
           "#endif /* _LINUX_MEMFD_H */" > /usr/include/linux/memfd.h; fi

before_script:
  - cd minivideo/build/
  - cmake --version
  - cmake ..
  - make

script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then source /opt/qt510/bin/qt510-env.sh; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export PATH=$PATH:/usr/local/opt/qt5/bin:/usr/local/bin; fi
  - cd ../../mini_analyser/
  - qmake
  - make
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
     make INSTALL_ROOT=appdir -j$(nproc) install; find appdir/;
     wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage";
     chmod a+x linuxdeployqt-continuous-x86_64.AppImage;
     unset QTDIR; unset QT_PLUGIN_PATH; unset LD_LIBRARY_PATH;
     export VERSION=$(git rev-parse --short HEAD);
     mkdir -p appdir/usr/plugins/imageformats/ appdir/usr/plugins/iconengines/;
     cp /opt/qt510/plugins/imageformats/libqsvg.so appdir/usr/plugins/imageformats/;
     cp /opt/qt510/plugins/iconengines/libqsvgicon.so appdir/usr/plugins/iconengines/;
     ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -extra-plugins=imageformats/libqsvg.so,iconengines/libqsvgicon.so;
     ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage;
   fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
     make install;
    fi

after_success:
 - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
     find appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq;
     curl --upload-file mini_analyser*.AppImage https://transfer.sh/mini_analyser-git.$(git rev-parse --short HEAD)-linux64.AppImage;
   fi
 - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
     cd bin/;
     zip -r -X mini_analyser.zip mini_analyser.app;
     curl --upload-file mini_analyser*.zip https://transfer.sh/mini_analyser-git.$(git rev-parse --short HEAD)-macOS.zip;
   fi
